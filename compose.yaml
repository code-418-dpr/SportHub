services:
  traefik:
    profiles:
      - server
    image: traefik:v3.4
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=s.scorpi-on@ya.ru"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--api.dashboard=true"
      - "--api=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    networks:
      - network

  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    user: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network

  seq:
    image: datalust/seq:2024
    restart: unless-stopped
    environment:
      ACCEPT_EULA: Y
    ports:
      - "5341:80"
    networks:
      - network

  web:
    profiles:
      - server
    build:
      context: ./services/SportHub-web
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      AUTH_TRUST_HOST: "true"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_YANDEX_ID: ${AUTH_YANDEX_ID}
      AUTH_YANDEX_SECRET: ${AUTH_YANDEX_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${HOSTNAME}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${HOSTNAME}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      # - "traefik.http.routers.traefik.middlewares=auth"
      # - "traefik.http.middlewares.auth.basicauth.users=${DASHBOARD_AUTH}"
    depends_on:
      - postgres
      - seq
    networks:
      - network

  web-local:
    profiles:
      - local
    build:
      context: ./services/SportHub-web
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      AUTH_TRUST_HOST: "true"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_YANDEX_ID: ${AUTH_YANDEX_ID}
      AUTH_YANDEX_SECRET: ${AUTH_YANDEX_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - seq
    networks:
      - network

  parser:
    profiles:
      - server
    build:
      context: ./services/SportHub-parser
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      PDF_FILE_URL: https://www.minsport.gov.ru/activity/government-regulation/edinyj-kalendarnyj-plan/
      BACKEND_DATA_ROUTE_URL: http://web:3000/api/data
      LOCAL_PDF_ONLY: ""
      # SEQ_URL: http://seq:5341
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "8000:8000"
    depends_on:
      - web
      - seq
    networks:
      - network
    volumes:
      - parser_cache:/app/tmp

  parser-local:
    profiles:
      - local
    build:
      context: ./services/SportHub-parser
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      PDF_FILE_URL: https://www.minsport.gov.ru/activity/government-regulation/edinyj-kalendarnyj-plan/
      BACKEND_DATA_ROUTE_URL: http://web-local:3000/api/data
      LOCAL_PDF_ONLY: ""
      # SEQ_URL: http://seq:5341
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "8000:8000"
    depends_on:
      - web-local
      - seq
    networks:
      - network
    volumes:
      - parser_cache:/app/tmp

networks:
  network:

volumes:
  postgres_data:
  parser_cache:
  letsencrypt: