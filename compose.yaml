services:
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    user: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network

  seq:
    image: datalust/seq:2024
    restart: unless-stopped
    environment:
      ACCEPT_EULA: Y
    ports:
      - "5341:80"
    networks:
      - network

  web:
    build:
      context: ./services/SportHub-web
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      AUTH_TRUST_HOST: true
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_YANDEX_ID: ${AUTH_YANDEX_ID}
      AUTH_YANDEX_SECRET: ${AUTH_YANDEX_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - seq
    networks:
      - network

  parser:
    build:
      context: ./services/SportHub-parser
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      PDF_FILE_URL: https://www.minsport.gov.ru/activity/government-regulation/edinyj-kalendarnyj-plan/
      BACKEND_DATA_ROUTE_URL: http://web:3000/api/data
      LOCAL_PDF_ONLY: ""
      # SEQ_URL: http://seq:5341
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "8000:8000"
    depends_on:
      - web
      - seq
    networks:
      - network
    volumes:
      - parser_cache:/app/tmp

networks:
  network:

volumes:
  postgres_data:
  parser_cache: